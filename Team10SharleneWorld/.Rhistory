# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
if (is.na(batch_mean)) {
print(c(batch_start_row, batch_end_row, batch, column))
print(data_set[batch_start_row:batch_end_row, column])
}
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
# two_ride_batched <- divide_into_batches(sim_data2_adjusted)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(zoo)
library(tidyverse)
sim_data3 <- read.csv("data_3_rides.csv")
sim_data3[is.na(sim_data3)] <- 0 # Replace NA values with 0
head(sim_data3)
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue") +
geom_line(aes(y = avg_wait_person_c),color = "darkgreen")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3), ] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data3_adjusted <- sim_data3_adjusted[1:nrow(sim_data2_adjusted), ]
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
# for debugging
# if (is.na(batch_mean)) {
#   print(c(batch_start_row, batch_end_row, batch, column))
#   print(data_set[batch_start_row:batch_end_row, column])
# }
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
# two_ride_batched <- divide_into_batches(sim_data2_adjusted)
View(three_ride_batched)
View(sim_data3_adjusted)
tail(sim_data3_adjusted)
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
tail(sim_data3_adjusted)
sim_data3_adjusted <- sim_data3_adjusted[1:nrow(sim_data2_adjusted), ]
tail(sim_data3_adjusted)
nrow(sim_data2_adjusted)
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
View(sim_data3_adjusted)
View(sim_data2_adjusted)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(zoo)
library(tidyverse)
sim_data3 <- read.csv("data_3_rides.csv")
sim_data3[is.na(sim_data3)] <- 0 # Replace NA values with 0
head(sim_data3)
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue") +
geom_line(aes(y = avg_wait_person_c),color = "darkgreen")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3), ] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- sim_dat23_adjusted[1:nrow(sim_data3_adjusted), ]
sim_data2_adjusted <- sim_data2_adjusted[1:nrow(sim_data3_adjusted), ]
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
# for debugging
# if (is.na(batch_mean)) {
#   print(c(batch_start_row, batch_end_row, batch, column))
#   print(data_set[batch_start_row:batch_end_row, column])
# }
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
# for debugging
if (is.na(batch_mean)) {
print(c(batch_start_row, batch_end_row, batch, column))
print(data_set[batch_start_row:batch_end_row, column])
}
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
# two_ride_batched <- divide_into_batches(sim_data2_adjusted)
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
three_ride_batched <- subset(three_ride_batched, select = c(colnames(two_ride_batched)))
difference_df <- three_ride_batched - two_ride_batched
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
print(col_values)
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
# print(sample_mean)
# print(sample_variance)
# print(lower_bound)
# print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
# print(col_values)
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
# print(sample_mean)
# print(sample_variance)
# print(lower_bound)
# print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
?cat
View(CI_stats)
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats <- subset(CI_stats, select = -c(time, total_agts))
CI_stats
col_names <- colnames(CI_stats)
for (var_name in col_name){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of ",var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats <- subset(CI_stats, select = -c(time, total_agts))
CI_stats
col_names <- colnames(CI_stats)
for (var_name in col_name){
upper_bound <- CI_stats[3, col_name]
lower_bound <- CI_stats[4, col_name]
cat(paste0("The confidence interval of ", col_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, col_name]
lower_bound <- CI_stats[4, col_name]
cat(paste0("The confidence interval of ", col_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of ", col_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of the difference between a three-ride-type system and a two-ride-type system when it comes to", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of the difference between a three-ride-type system and a two-ride-type system when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of the difference between a three-ride-type system and a two-ride-type system when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- CI_stats[3, var_name]
lower_bound <- CI_stats[4, var_name]
# for the situations where the upper_bound is more negative than the lower bound
if (upper_bound < lower_bound) {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", upper_bound, ",", lower_bound, ")\n"))
}
else {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
}
?round
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- signif(CI_stats[3, var_name], 3)
lower_bound <- signif(CI_stats[4, var_name], 3)
# for the situations where the upper_bound is more negative than the lower bound
if (upper_bound < lower_bound) {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", upper_bound, ",", lower_bound, ")\n"))
}
else {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- round(CI_stats[3, var_name], 3)
lower_bound <- round(CI_stats[4, var_name], 3)
# for the situations where the upper_bound is more negative than the lower bound
if (upper_bound < lower_bound) {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", upper_bound, ",", lower_bound, ")\n"))
}
else {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
}
col_names <- colnames(CI_stats)
for (var_name in col_names){
upper_bound <- signif(CI_stats[3, var_name], 4)
lower_bound <- signif(CI_stats[4, var_name], 4)
# for the situations where the upper_bound is more negative than the lower bound
if (upper_bound < lower_bound) {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", upper_bound, ",", lower_bound, ")\n"))
}
else {
cat(paste0("The confidence interval of Z when it comes to ", var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(zoo)
library(tidyverse)
sim_data3 <- read.csv("data_3_rides.csv")
head(sim_data3)
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue") +
geom_line(aes(y = avg_wait_person_c),color = "darkgreen")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
new_df <- filter(sim_data3, sim_data3$time > 3800)
ggplot(new_df, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
bm <- function(vals,bs="sqroot",warn=FALSE)
{
N <- length(vals)
paste0("There are ", N, "observations.")
if (N<1000)
{
if (warn) # if warning
cat("WARNING: too few samples (less than 1000)\n")
if (N<10)
return(NA)
}
if (bs=="sqroot")
{
b <- floor(sqrt(N)) # batch size
a <- floor(N/b) # number of batches
}
else
if (bs=="cuberoot")
{
b <- floor(N^(1/3)) # batch size
a <- floor(N/b) # number of batches
}
else # batch size provided
{
stopifnot(is.numeric(bs))
b <- floor(bs) # batch size
if (b > 1) # batch size valid
a <- floor(N/b) # number of batches
else
stop("batch size invalid (bs=",bs,")")
}
Ys <- sapply(1:a,function(k) return(mean(vals[((k-1)*b+1):(k*b)])))
# return(Ys)
muhat <- mean(Ys) # steady-state mean
sigmahatsq <- sum((Ys-muhat)^2)/(a-1) # steady state variance
bmse <- sqrt(sigmahatsq/N)
upper_bound <- muhat + abs(qt(0.025,a-1,)*(sqrt(sigmahatsq)/sqrt(a)))
lower_bound <- muhat - abs(qt(0.025,a-1,)*(sqrt(sigmahatsq)/sqrt(a)))
return(list(est=muhat,se=bmse, var = sigmahatsq, upper_bound = upper_bound, lower_bound = lower_bound))
}
## apply bm to each col of a matrix of MCMC samples
## input: mcmat is a matrix with each row corresponding to a sample from the multivariate distribution of interest
## skip = vector of columns to skip
## output: matrix with number of rows=number of dimensions of distribution and 2 columns (estimate and s.error)
bmmat <- function(mcmat,skip=NA)
{
if (!any(is.na(skip)))
{
num=ncol(mcmat)-length(skip)
mcmat=mcmat[-skip] # remove columns to be skipped
}
else # assume it is NA
num=ncol(mcmat)
bmvals=matrix(NA,num,5,dimnames=list(colnames(mcmat),c("est","se","var","upper_bound","lower_bound"))) # first col=est, second col=MS s.error, third col= variance, 4th and 5th upper and lower
bmres=apply(mcmat,2,bm)
for (i in 1:num)
{
bmvals[i,]=c(bmres[[i]]$est,bmres[[i]]$se, bmres[[i]]$var, bmres[[i]]$upper_bound, bmres[[i]]$lower_bound)
}
return(bmvals)
}
bm(new_df$avg_wait_person, bs="sqroot")
bmmat(new_df)
conf_df <- as.data.frame(t(bmmat(new_df)))
# filter out columns you are not using
conf_df <- subset(conf_df, select = -c(time, total_agts))
conf_df
var_names <- names(conf_df)
for (var_name in var_names){
upper_bound <- conf_df[4, var_name]
lower_bound <- conf_df[5,var_name]
cat(paste0("The confidence interval of ",var_name, " at 95% confidence is (", lower_bound, ",", upper_bound, ")\n"))
}
