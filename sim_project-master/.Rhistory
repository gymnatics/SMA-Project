geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3)] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3), ] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(zoo)
library(tidyverse)
sim_data3 <- read.csv("data_3_rides.csv")
head(sim_data3)
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue") +
geom_line(aes(y = avg_wait_person_c),color = "darkgreen")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3), ] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
# difference_df <- three_ride_batched
# divide_into_batches(new_df)
View(sim_data2)
sim_data3_adjusted <- sim_data3_adjusted[1:nrow(sim_data2_adjusted), ]
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
difference_df <- three_ride_batched - two_ride_batched
View(sim_data3_adjusted)
three_ride_batched <- subset(three_ride_batched, select = c(colnames(two_ride_batched)))
difference_df <- three_ride_batched - two_ride_batched
?qt
data_set_colnames <- colnames(data_set)
data_set_colnames <- colnames(difference_df)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 5))
colnames(batched_df) <- data_set_colnames
rownames(batched_df) <- c("deg_freedom", "sample_mean", "sample_variance", "lower_bound", "upper_bound")
View(batched_df)
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(lenght(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(lenght(col_values))))
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df)
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(lenght(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(lenght(col_values))))
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
print(sample_mean)
print(sample_variance)
print(lower_bound)
print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
View(difference_df)
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
print(col_values)
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
# print(sample_mean)
# print(sample_variance)
# print(lower_bound)
# print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
# print(col_values)
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
print(sample_mean)
# print(sample_variance)
# print(lower_bound)
# print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
calculate_confidence_intervals <- function(difference, alpha){
# Create a new df to store the batched data
data_set_colnames <- colnames(difference)
stats_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = 4))
colnames(stats_df) <- data_set_colnames
rownames(stats_df) <- c("sample_mean", "sample_variance", "lower_bound", "upper_bound")
for (column in 1:ncol(difference)){
# Calculate the degrees of freedom, sample mean, sample variance, and lower and upper bounds
col_values <- difference[, column]
print(col_values)
deg_freedom <- length(col_values) - 1
sample_mean <- mean(col_values) # sample mean
sample_variance <- sum((col_values - sample_mean) ^ 2) / (length(col_values) - 1) # sample variance
upper_bound <- sample_mean + abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
lower_bound <- sample_mean - abs(qt(alpha / 2, deg_freedom - 1) * (sqrt(sample_variance) / sqrt(length(col_values))))
# print(sample_mean)
# print(sample_variance)
# print(lower_bound)
# print(upper_bound)
# Store the values in stats_df
stats_df["sample_mean", column] <- sample_mean
stats_df["sample_variance", column] <- sample_variance
stats_df["lower_bound", column] <- lower_bound
stats_df["upper_bound", column] <- upper_bound
}
stats_df
}
CI_stats <- calculate_confidence_intervals(difference_df, 0.05)
CI_stats
View(difference_df)
View(three_ride_batched)
View(two_ride_batched)
View(three_ride_batched)
View(sim_data2_adjusted)
tail(sim_data2_adjusted)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(zoo)
library(tidyverse)
sim_data3 <- read.csv("data_3_rides.csv")
head(sim_data3)
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue") +
geom_line(aes(y = avg_wait_person_c),color = "darkgreen")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data3, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data3_adjusted <- filter(sim_data3, sim_data3$time > 3800)
ggplot(sim_data3_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue") +
geom_line(aes(y = average_profits_c),color = "darkgreen")
sim_data2 <- read.csv("2_rides_data_v3.csv")
sim_data2[is.na(sim_data2)] <- 0 # Replace NA values with 0
sim_data2 <- sim_data2[1:nrow(sim_data3), ] # Because sim_data2 has more rows than sim_data3, we remove sim_data2's excess rows
head(sim_data2)
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = avg_wait_person),color = "orange") +
geom_line(aes(y = avg_wait_person_a),color = "darkred") +
geom_line(aes(y = avg_wait_person_b),color = "steelblue")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = time_in_park),color = "orange") +
geom_line(aes(y = time_in_queue),color = "darkred")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_score),color = "orange")
ggplot(sim_data2, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data2_adjusted <- filter(sim_data2, sim_data2$time > 3800)
ggplot(sim_data2_adjusted, aes(time)) +
geom_line(aes(y = average_profits),color = "orange") +
geom_line(aes(y = average_profits_a),color = "darkred") +
geom_line(aes(y = average_profits_b),color = "steelblue")
sim_data3_adjusted <- sim_data3_adjusted[1:nrow(sim_data2_adjusted), ]
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
three_ride_batched <- subset(three_ride_batched, select = c(colnames(two_ride_batched)))
difference_df <- three_ride_batched - two_ride_batched
View(difference_df)
View(two_ride_batched)
View(three_ride_batched)
View(two_ride_batched)
divide_into_batches <- function(data_set){
num_obs <- nrow(data_set) # number of observations
# print(num_obs) # for debugging
batch_size <- floor(sqrt(num_obs)) # batch size
# print(batch_size) # for debugging
num_batches <- floor(num_obs / batch_size) # number of batches
# print(num_batches) # for debugging
# Create a new df to store the batched data
data_set_colnames <- colnames(data_set)
batched_df <- data.frame(matrix(ncol = length(data_set_colnames), nrow = num_batches))
colnames(batched_df) <- data_set_colnames
# for each variable we're observing,
for (column in 1:ncol(data_set)) {
# for each batch, calculate the batch/sample mean
for (batch in 1:num_batches) {
batch_start_row <- (batch - 1) * batch_size + 1
batch_end_row <- batch_start_row + batch_size - 1
batch_mean <- mean(data_set[batch_start_row:batch_end_row, column])
batched_df[batch, column] <- batch_mean # add the batch_mean to batched_df
}
}
batched_df
}
three_ride_batched <- divide_into_batches(sim_data3_adjusted)
two_ride_batched <- divide_into_batches(sim_data2_adjusted)
View(two_ride_batched)
View(three_ride_batched)
